#ifndef AVOID_H
#define AVOID_H

#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <vector>

#include "Vector2d.h"
#include "behaviour.h"
#include "sensorContact.h"

class BehaviourAvoid: public Behaviour{

 public:

  BehaviourAvoid(float val){

    activationLevel = 0.;
    staticGain = 1.5;

    minDist = val;
    seed = (0.5 - Random());

    response = new Vector2d(0.,0.);
  };

  ~BehaviourAvoid(){};
 
  // Returns a velocity vector
  Vector2d * GetResponse(){
    // Add noise to obstacle avoidance
    //seed = 0.9 + 0.2 * Random();
    //seed = (0.5 - Random());
    
   
    //response = new Vector2d( bearing2Obstacle + M_PI);
    response = new Vector2d( bearing2Obstacle - M_PI + seed);
    //response = new Vector2d( bearing2Obstacle - M_PI);
    
    if(activationLevel == 0.){
      response = new Vector2d(0.,0.);
    }
    else{
      response = ScalarMultipleVector(activationLevel, response);
    }

    return response;
  }

  // Takes in a list of vectors giving the local position of neighbours
  void UpdateStimulus( std::vector<SensorContact*> contacts) {
   
    // Find closest contact
    float closest = 99999999.;
    int id = 0;

    for(int i =0; i < contacts.size(); i++ ){

      Vector2d * localPos = contacts[i]->GetVector();
      float dist = localPos->GetNorm();
      
      if(dist < closest && dist > 0.){
      //if(dist < closest && dist > 0.001){
	closest = dist;
	id = i;
      }
           
    } 

    if(closest < minDist){
      bearing2Obstacle = contacts[id]->GetVector()->GetAngle(); 
      activationLevel = 1. - closest/minDist;
    }
    else{
      activationLevel = 0.;
    }

  };
  
  // Display information to the screen.
  void Print(){
    printf("Avoid\t%f\n",activationLevel);
  };


 private:
  
  float Random(){
    return rand()/(float)(RAND_MAX);
  }

  float minDist;

  bool leftHanded;
  float seed;

  float bearing2Obstacle;

};
#endif
